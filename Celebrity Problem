// Coded on GFG medium level question 

class Solution
{ 
    
    boolean knows(int M[][],int a, int b, int n){
        if(M[a][b]==1){
            return true;
        
        }else{
            return false;
        }
    }
    //Function to find if there is a celebrity in the party or not.
    int celebrity(int M[][], int n)
    {
    	Stack<Integer> st = new Stack<Integer>();
    	for(int i=0;i<n;i++){
    	    st.push(i);
    	}
    	
    	while(st.size() > 1){
    	    int a = st.peek();
    	    st.pop();
    	    
    	    int b = st.peek();
    	    st.pop();
    	    
    	    if(knows (M,a,b,n)){
    	        st.push(b);
    	    }else{
    	        st.push(a);
    	    }
    	}
    	int ans = st.peek();
    	
    	boolean rowCheck = false;
    	int zeroCount = 0;
    	
    	for(int i=0;i<n;i++){
    	    if(M[ans][i] == 0)
    	        zeroCount++;
    	}
    	if(zeroCount == n){
    	    rowCheck = true;
    	}
    	
    	boolean colCheck = false;
    	int oneCount = 0;
    	 
    	 for(int i=0;i<n;i++){
    	     if(M[i][ans] == 1)
    	          oneCount++;  
    	 }
    	 
    	 if(oneCount == n-1){
    	     colCheck = true;
    	 }
    	 
    	 if(rowCheck == true && colCheck == true){ //this has helped me to understand why to use boolean variable
    	     return ans;
    	 }
    	 else{
    	     return -1;
    	 }
    
    	}
    }
